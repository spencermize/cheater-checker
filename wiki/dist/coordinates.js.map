{"version":3,"sources":["../src/coordinates.js"],"names":["parseCoordinates","infoboxData","coordinates","parseInfoboxCoords","latd","longd","parseDeprecatedCoords","lat","lon","error","dmsToDecimal","floatOrDefault","data","latm","lats","latNs","longm","longs","longEw","wikiCoordinates","latitude","longitude","infoboxCoordinatePattern","coord","match","convertCoordinatesFromStrings","matches","slice","directions","N","S","E","W","degrees","minutes","seconds","direction","toFixed","numStr","isNaN","num"],"mappings":"4EAMgBA,gB,CAAAA,gB,CAAT,QAASA,iBAAT,GAAuC,OACzCC,GAAYC,WAD6B,CAErCC,mBAAmBF,EAAYC,WAA/B,CAFqC,CAIzCD,EAAYG,IAAZ,EAAoBH,EAAYI,KAJS,CAKrCC,sBAAsBL,CAAtB,CALqC,CAOtC,CACNM,IAAK,IADC,CAENC,IAAK,IAFC,CAGNC,MAAO,yBAHD,CAKP,CAWD,QAASH,sBAAT,GAAqC,IAC9B,GAAWI,aAChBC,eAAeC,EAAKR,IAApB,CADgB,CAEhBO,eAAeC,EAAKC,IAApB,CAFgB,CAGhBF,eAAeC,EAAKE,IAApB,CAHgB,CAIhBF,EAAKG,KAJW,CADmB,CAO9B,EAAYL,aACjBC,eAAeC,EAAKP,KAApB,CADiB,CAEjBM,eAAeC,EAAKI,KAApB,CAFiB,CAGjBL,eAAeC,EAAKK,KAApB,CAHiB,CAIjBL,EAAKM,MAJY,CAPkB,CAapC,MAAOC,iBAAgBC,CAAhB,CAA0BC,CAA1B,CACP,CAGD,GAAMC,0BAA2B,0FAAjC,CAUA,QAASnB,mBAAT,GAAmC,CAClC,GAAI,EAAJ,CAAa,CAAb,CAAuB,CAAvB,CAIA,MAHA,GAAUoB,EAAMC,KAAN,CAAYF,wBAAZ,CAGV,CAFA,EAAWG,8BAA8BC,EAAQC,KAAR,CAAc,CAAd,CAAiB,CAAjB,CAA9B,CAEX,CADA,EAAYF,8BAA8BC,EAAQC,KAAR,CAAc,CAAd,CAA9B,CACZ,CAAOR,gBAAgBC,CAAhB,CAA0BC,CAA1B,CACP,CAYD,QAASI,8BAAT,GAAgD,CAC/C,MAAOf,cACNC,eAAee,EAAQ,CAAR,CAAf,CADM,CAENf,eAAee,EAAQ,CAAR,CAAf,CAFM,CAGNf,eAAee,EAAQ,CAAR,CAAf,CAHM,CAINA,EAAQ,CAAR,CAJM,CAMP,CAGD,GAAME,YAAa,CAAEC,EAAG,CAAL,CAAQC,EAAG,CAAC,CAAZ,CAAeC,EAAG,CAAlB,CAAqBC,EAAG,CAAC,CAAzB,CAAnB,CASA,QAAStB,aAAT,SAA4D,CAC3D,MACC,CAACuB,EAAW,EAAI,EAAL,CAAWC,CAArB,CAAgC,EAAI,IAAL,CAAaC,CAA7C,GACCP,WAAWQ,CAAX,GAAyB,CAD1B,CAGD,CAUD,QAASjB,gBAAT,KAA8C,CAC7C,MAAO,CACNZ,KAAYa,EAASiB,OAAT,CAAiB,CAAjB,CADN,CAEN7B,KAAYa,EAAUgB,OAAV,CAAkB,CAAlB,CAFN,CAIP,CAUD,QAAS1B,eAAT,GAAgC,CAC/B,GAAM,IAAa2B,CAAnB,CACA,MAAQC,OAAMC,CAAN,CAAD,CAAoB,CAApB,CAAcA,CACrB","file":"coordinates.js","sourcesContent":["/**\r\n * @ignore\r\n * @description Parses Coordinates for pages where the default Wiki Infobox Parser fails.\r\n * @param  {Object} infoboxData - raw data object from Wiki Infobox Parser\r\n * @returns {Object} - formatted object containing coordinates, or null object if none.\r\n */\r\nexport function parseCoordinates(infoboxData) {\r\n\tif (infoboxData.coordinates) {\r\n\t\treturn parseInfoboxCoords(infoboxData.coordinates);\r\n\t}\r\n\tif (infoboxData.latd && infoboxData.longd) {\r\n\t\treturn parseDeprecatedCoords(infoboxData);\r\n\t}\r\n\treturn {\r\n\t\tlat: null,\r\n\t\tlon: null,\r\n\t\terror: 'No coordinates on page.'\r\n\t};\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @description Parses coordinates which are in Wikipedia Deprecated Format.\r\n * @example\r\n * parseDeprecatedCoords('00 |latm=47 |lats=59 |latNS=S','100 |longm=39 |longs=58 |longEW=E');\r\n * @param  {String} latString - Deprecated coordinate string for latitutde (from latd property)\r\n * @param  {String} lonString - Deprecated coordinate string for longitude (from longd property)\r\n * @returns {Object} - Wiki formatted object containing lat and lon\r\n */\r\nfunction parseDeprecatedCoords(data) {\r\n\tconst latitude = dmsToDecimal(\r\n\t\tfloatOrDefault(data.latd),\r\n\t\tfloatOrDefault(data.latm),\r\n\t\tfloatOrDefault(data.lats),\r\n\t\tdata.latNs\r\n\t);\r\n\tconst longitude = dmsToDecimal(\r\n\t\tfloatOrDefault(data.longd),\r\n\t\tfloatOrDefault(data.longm),\r\n\t\tfloatOrDefault(data.longs),\r\n\t\tdata.longEw\r\n\t);\r\n\treturn wikiCoordinates(latitude, longitude);\r\n}\r\n\r\n// regex to match coordinate string in infobox\r\nconst infoboxCoordinatePattern = /(\\d{1,2})\\|(\\d{1,2})\\|(\\d{1,2})?\\|?([NSEW])\\|(\\d{1,3})\\|(\\d{1,2})\\|(\\d{1,2})?\\|?([NSEW])/;\r\n\r\n/**\r\n * @ignore\r\n * @description Parses coordinates which are embedded in infobox instead of in the page.\r\n * @example\r\n * parseInfoboxCoord('{{coord|38|54|N|16|36|E|type:region:IT_type:city(94969)|display=inline}}')\r\n * @param  {String} coord - coordinate string from infobox.\r\n * @return {Object} - Wiki formatted object containing lat and lon\r\n */\r\nfunction parseInfoboxCoords(coord) {\r\n\tlet matches, latitude, longitude;\r\n\tmatches = coord.match(infoboxCoordinatePattern);\r\n\tlatitude = convertCoordinatesFromStrings(matches.slice(0, 4));\r\n\tlongitude = convertCoordinatesFromStrings(matches.slice(4));\r\n\treturn wikiCoordinates(latitude, longitude);\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @description Converts coordinates after they've been separated into components by regex matching.\r\n * Missing or undefined elements in array will be treated as 0. Missing direction will\r\n * result in positive coordinate.\r\n * @example\r\n * convertCoordinatesFromStrings(['38','54','23','N'])\r\n * @param {Array} matches - array in format ['degrees','minutes','seconds','direction']\r\n * @returns {Number} - coordinate in decimal form, with proper positive / negative sign applied.\r\n */\r\nfunction convertCoordinatesFromStrings(matches) {\r\n\treturn dmsToDecimal(\r\n\t\tfloatOrDefault(matches[1]),\r\n\t\tfloatOrDefault(matches[2]),\r\n\t\tfloatOrDefault(matches[3]),\r\n\t\tmatches[4]\r\n\t);\r\n}\r\n\r\n// simplifies positive / negative calculation in decimal conversion\r\nconst directions = { N: 1, S: -1, E: 1, W: -1 };\r\n\r\n/**\r\n * @ignore\r\n * @description Converts coordinates from degrees, minutes, seconds, direction to decimal.\r\n * @example\r\n * dmsToDecimal(100,39,58,'W') == -100.6661111\r\n * @returns {Number} - coordinate in decimal form, with proper positive / negative sign applied.\r\n */\r\nfunction dmsToDecimal(degrees, minutes, seconds, direction) {\r\n\treturn (\r\n\t\t(degrees + (1 / 60) * minutes + (1 / 3600) * seconds) *\r\n\t\t(directions[direction] || 1)\r\n\t);\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @description Returns latitude and longitude in format Wikipedia Parser would do so.\r\n * Rounds to 4 decimal places.\r\n * @param  {Number} latitude - latitude in decimal form\r\n * @param  {Number} longitude - longitude in decimal form\r\n * @returns {Object} - {lat: latitude, lon: longitude}\r\n */\r\nfunction wikiCoordinates(latitude, longitude) {\r\n\treturn {\r\n\t\tlat: Number(latitude.toFixed(4)),\r\n\t\tlon: Number(longitude.toFixed(4))\r\n\t};\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @description Convert numeric string to Number or return 0 if not possible\r\n * @example\r\n * floatOrDefault(\"5\") == 5; floatOrDefault(undefined) == 0;\r\n * @param  {String} numStr - input number string (or undefined)\r\n * @returns {Number} - returns numStr converted to Number or 0 if NaN\r\n */\r\nfunction floatOrDefault(numStr) {\r\n\tconst num = Number(numStr);\r\n\treturn !isNaN(num) ? num : 0;\r\n}\r\n"]}