{"version":3,"sources":["../src/wiki.js"],"names":["wiki","defaultOptions","apiUrl","origin","res","query","redirects","length","apiOptions","prop","inprop","ppprop","titles","to","list","srsearch","srlimit","limit","search","map","all","article","title","catch","message","opensearch","err","namespace","action","then","handleRedirect","Object","keys","pages","id","Error","console","log","assign","options","random","rnnamespace","rnlimit","page","geoSearch","gsradius","radius","gscoord","lat","lon","geosearch","findById","pageids","pageid","find","results","predicate","name","allPages","allCategories","pagesInCategory","cmtitle","category","prefixSearch","pslimit","psprofile","pssearch","prefixsearch","mostViewed","mostviewed","count","api","params"],"mappings":"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","file":"wiki.js","sourcesContent":["'use strict';\r\n\r\nimport { pagination, api, aggregate } from './util';\r\nimport wikiPage from './page';\r\n\r\n/**\r\n * @namespace\r\n * @constant\r\n * @property {string} apiUrl - URL of Wikipedia API\r\n * @property {string} headers - Headers to pass through to the API request\r\n * @property {string} origin - When accessing the API using a cross-domain AJAX\r\n * request (CORS), set this to the originating domain. This must be included in\r\n * any pre-flight request, and therefore must be part of the request URI (not\r\n * the POST body). This must match one of the origins in the Origin header\r\n * exactly, so it has to be set to something like https://en.wikipedia.org or\r\n * https://meta.wikimedia.org. If this parameter does not match the Origin\r\n * header, a 403 response will be returned. If this parameter matches the Origin\r\n * header and the origin is whitelisted, an Access-Control-Allow-Origin header\r\n * will be set.\r\n */\r\nconst defaultOptions = {\r\n\tapiUrl: 'http://en.wikipedia.org/w/api.php',\r\n\torigin: '*'\r\n};\r\n\r\n/**\r\n * wiki\r\n * @example\r\n * wiki({ apiUrl: 'http://fr.wikipedia.org/w/api.php' }).search(...);\r\n * @namespace Wiki\r\n * @param  {Object} options\r\n * @return {Object} - wiki (for chaining methods)\r\n */\r\nexport default function wiki(options = {}) {\r\n\tif (this instanceof wiki) {\r\n\t\t// eslint-disable-next-line\r\n\t\tconsole.log(\r\n\t\t\t'Please do not use wikijs ^1.0.0 as a class. Please see the new README.'\r\n\t\t);\r\n\t}\r\n\r\n\tconst apiOptions = Object.assign({}, defaultOptions, options);\r\n\r\n\tfunction handleRedirect(res) {\r\n\t\tif (res.query.redirects && res.query.redirects.length === 1) {\r\n\t\t\treturn api(apiOptions, {\r\n\t\t\t\tprop: 'info|pageprops',\r\n\t\t\t\tinprop: 'url',\r\n\t\t\t\tppprop: 'disambiguation',\r\n\t\t\t\ttitles: res.query.redirects[0].to\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Search articles\r\n\t * @example\r\n\t * wiki.search('star wars').then(data => console.log(data.results.length));\r\n\t * @example\r\n\t * wiki.search('star wars').then(data => {\r\n\t * \tdata.next().then(...);\r\n\t * });\r\n\t * @method Wiki#search\r\n\t * @param  {string} query - keyword query\r\n\t * @param  {Number} [limit] - limits the number of results\r\n\t * @return {Promise} - pagination promise with results and next page function\r\n\t */\r\n\tfunction search(query, limit = 50, all = false) {\r\n\t\treturn pagination(\r\n\t\t\tapiOptions,\r\n\t\t\t{\r\n\t\t\t\tlist: 'search',\r\n\t\t\t\tsrsearch: query,\r\n\t\t\t\tsrlimit: limit\r\n\t\t\t},\r\n\t\t\tres => res.query.search.map(article => {\r\n\t\t\t\treturn all ? article : article.title;\r\n\t\t\t})\r\n\t\t).catch(err => {\r\n\t\t\tif (err.message === '\"text\" search is disabled.') {\r\n\t\t\t\t// Try backup search method\r\n\t\t\t\treturn opensearch(query, limit);\r\n\t\t\t}\r\n\t\t\tthrow err;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Search articles using \"fuzzy\" prefixsearch\r\n\t * @example\r\n\t * wiki.prefixSearch('star wars').then(data => console.log(data.results.length));\r\n\t * @example\r\n\t * wiki.prefixSearch('star wars').then(data => {\r\n\t * \tdata.next().then(...);\r\n\t * });\r\n\t * @method Wiki#prefixSearch\r\n\t * @param  {string} query - keyword query\r\n\t * @param  {Number} [limit] - limits the number of results\r\n\t * @return {Promise} - pagination promise with results and next page function\r\n\t */\r\n\tfunction prefixSearch(query, limit = 50) {\r\n\t\treturn pagination(\r\n\t\t\tapiOptions,\r\n\t\t\t{\r\n\t\t\t\tlist: 'prefixsearch',\r\n\t\t\t\tpslimit: limit,\r\n\t\t\t\tpsprofile: 'fuzzy',\r\n\t\t\t\tpssearch: query\r\n\t\t\t},\r\n\t\t\tres => res.query.prefixsearch.map(article => article.title)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Opensearch (mainly used as a backup to normal text search)\r\n\t * @param  {string} query - keyword query\r\n\t * @param  {Number} limit - limits the number of results\r\n\t * @return {Array}       List of page title results\r\n\t */\r\n\tfunction opensearch(query, limit = 50) {\r\n\t\treturn api(apiOptions, {\r\n\t\t\tsearch: query,\r\n\t\t\tlimit,\r\n\t\t\tnamespace: 0,\r\n\t\t\taction: 'opensearch',\r\n\t\t\tredirects: undefined\r\n\t\t}).then(res => res[1]);\r\n\t}\r\n\r\n\t/**\r\n\t * Random articles\r\n\t * @example\r\n\t * wiki.random(3).then(results => console.log(results[0]));\r\n\t * @method Wiki#random\r\n\t * @param  {Number} [limit] - limits the number of random articles\r\n\t * @return {Promise} - List of page titles\r\n\t */\r\n\tfunction random(limit = 1) {\r\n\t\treturn api(apiOptions, {\r\n\t\t\tlist: 'random',\r\n\t\t\trnnamespace: 0,\r\n\t\t\trnlimit: limit\r\n\t\t}).then(res => res.query.random.map(article => article.title));\r\n\t}\r\n\r\n\t/**\r\n\t * Get Page\r\n\t * @example\r\n\t * wiki.page('Batman').then(page => console.log(page.pageid));\r\n\t * @method Wiki#page\r\n\t * @param  {string} title - title of article\r\n\t * @return {Promise}\r\n\t */\r\n\tfunction page(title) {\r\n\t\treturn api(apiOptions, {\r\n\t\t\tprop: 'info|pageprops',\r\n\t\t\tinprop: 'url',\r\n\t\t\tppprop: 'disambiguation',\r\n\t\t\ttitles: title\r\n\t\t})\r\n\t\t\t.then(handleRedirect)\r\n\t\t\t.then(res => {\r\n\t\t\t\tconst id = Object.keys(res.query.pages)[0];\r\n\t\t\t\tif (!id || id === '-1') {\r\n\t\t\t\t\tthrow new Error('No article found');\r\n\t\t\t\t}\r\n\t\t\t\treturn wikiPage(res.query.pages[id], apiOptions);\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Get Page by PageId\r\n\t * @example\r\n\t * wiki.findById(4335).then(page => console.log(page.title));\r\n\t * @method Wiki#findById\r\n\t * @param {integer} pageid, id of the page\r\n\t * @return {Promise}\r\n\t */\r\n\tfunction findById(pageid) {\r\n\t\treturn api(apiOptions, {\r\n\t\t\tprop: 'info|pageprops',\r\n\t\t\tinprop: 'url',\r\n\t\t\tppprop: 'disambiguation',\r\n\t\t\tpageids: pageid\r\n\t\t})\r\n\t\t\t.then(handleRedirect)\r\n\t\t\t.then(res => {\r\n\t\t\t\tconst id = Object.keys(res.query.pages)[0];\r\n\t\t\t\tif (!id || id === '-1') {\r\n\t\t\t\t\tthrow new Error('No article found');\r\n\t\t\t\t}\r\n\t\t\t\treturn wikiPage(res.query.pages[id], apiOptions);\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Find page by query and optional predicate\r\n\t * @example\r\n\t * wiki.find('luke skywalker').then(page => console.log(page.title));\r\n\t * @method Wiki#find\r\n\t * @param {string} search query\r\n\t * @param {function} [predicate] - testing function for choosing which page result to fetch. Default is first result.\r\n\t * @return {Promise}\r\n\t */\r\n\tfunction find(query, predicate = results => results[0]) {\r\n\t\treturn search(query)\r\n\t\t\t.then(res => predicate(res.results))\r\n\t\t\t.then(name => page(name));\r\n\t}\r\n\r\n\t/**\r\n\t * Geographical Search\r\n\t * @example\r\n\t * wiki.geoSearch(32.329, -96.136).then(titles => console.log(titles.length));\r\n\t * @method Wiki#geoSearch\r\n\t * @param  {Number} lat - latitude\r\n\t * @param  {Number} lon - longitude\r\n\t * @param  {Number} [radius=1000] - search radius in kilometers (default: 1km)\r\n\t * @return {Promise} - List of page titles\r\n\t */\r\n\tfunction geoSearch(lat, lon, radius = 1000) {\r\n\t\treturn api(apiOptions, {\r\n\t\t\tlist: 'geosearch',\r\n\t\t\tgsradius: radius,\r\n\t\t\tgscoord: `${lat}|${lon}`\r\n\t\t}).then(res => res.query.geosearch.map(article => article.title));\r\n\t}\r\n\r\n\t/**\r\n\t * @summary Find the most viewed pages with counts\r\n\t * @example\r\n\t * wiki.mostViewed().then(list => console.log(`${list[0].title}: ${list[0].count}`))\r\n\t * @method Wiki#mostViewed\r\n\t * @returns {Promise} - Array of {title,count}\r\n\t */\r\n\tfunction mostViewed() {\r\n\t\treturn api(apiOptions, {\r\n\t\t\taction: 'query',\r\n\t\t\tlist: 'mostviewed'\r\n\t\t}).then(res =>\r\n\t\t\tres.query.mostviewed.map(({ title, count }) => ({ title, count }))\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch all page titles in wiki\r\n\t * @method Wiki#allPages\r\n\t * @return {Array} Array of pages\r\n\t */\r\n\tfunction allPages() {\r\n\t\treturn aggregate(apiOptions, {}, 'allpages', 'title', 'ap');\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch all categories in wiki\r\n\t * @method Wiki#allCategories\r\n\t * @return {Array} Array of categories\r\n\t */\r\n\tfunction allCategories() {\r\n\t\treturn aggregate(apiOptions, {}, 'allcategories', '*', 'ac');\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch all pages in category\r\n\t * @method Wiki#pagesInCategory\r\n\t * @param  {String} category Category to fetch from\r\n\t * @return {Array} Array of pages\r\n\t */\r\n\tfunction pagesInCategory(category) {\r\n\t\treturn aggregate(\r\n\t\t\tapiOptions,\r\n\t\t\t{\r\n\t\t\t\tcmtitle: category\r\n\t\t\t},\r\n\t\t\t'categorymembers',\r\n\t\t\t'title',\r\n\t\t\t'cm'\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @summary Helper function to query API directly\r\n\t * @method Wiki#api\r\n\t * @param {Object} params [https://www.mediawiki.org/wiki/API:Query](https://www.mediawiki.org/wiki/API:Query)\r\n\t * @returns {Promise} Query Response\r\n\t * @example\r\n\t * wiki().api({\r\n\t *\taction: 'parse',\r\n\t *\tpage: 'Pet_door'\r\n\t * }).then(res => res.parse.title.should.equal('Pet door'));\r\n\t */\r\n\tfunction rawApi(params) {\r\n\t\treturn api(apiOptions, params);\r\n\t}\r\n\r\n\treturn {\r\n\t\tsearch,\r\n\t\trandom,\r\n\t\tpage,\r\n\t\tgeoSearch,\r\n\t\toptions,\r\n\t\tfindById,\r\n\t\tfind,\r\n\t\tallPages,\r\n\t\tallCategories,\r\n\t\tpagesInCategory,\r\n\t\topensearch,\r\n\t\tprefixSearch,\r\n\t\tmostViewed,\r\n\t\tapi: rawApi\r\n\t};\r\n}\r\n"]}