{"version":3,"sources":["../src/page.js"],"names":["wikiPage","get","rest","obj","first","firstValue","Object","keys","getFileName","Array","isArray","text","indexOf","split","name","apiOptions","prop","rvprop","rvlimit","rvparse","titles","raw","title","then","res","query","pages","pageid","revisions","rawContent","parseContent","explaintext","extract","generator","gimlimit","iiprop","map","id","rvsection","rawInfo","wikitext","parser","general","info","length","toLowerCase","_wikitext","key","metadata","hasOwnProperty","rawPageInfo","html","content","sections","summary","exintro","images","rawImages","image","imageinfo","reduce","imageInfos","list","url","references","cheerio","load","$","attr","links","plnamespace","pllimit","limit","link","aggregated","_pagination","externalLinks","ellimit","extlinks","categories","category","coordinates","page","data","backlinks","bllimit","bltitle","mainImage","Promise","all","bildname","imagen","Immagine","badge","logo","mainImageName","sort","b","a","find","filename","toUpperCase","replace","langlinks","lllimit","lang","fullInfo","tables","canonicalurl"],"mappings":"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","file":"page.js","sourcesContent":["import { aggregatePagination, pagination, api, parseContent } from './util';\r\nimport infoboxParser from 'infobox-parser';\r\nimport cheerio from 'cheerio';\r\nimport { parseCoordinates } from './coordinates';\r\n\r\nconst get = (obj, first, ...rest) => {\r\n\tif (obj === undefined || first === undefined) return obj;\r\n\tif (typeof first === 'function') {\r\n\t\treturn get(first(obj), ...rest);\r\n\t}\r\n\treturn get(obj[first], ...rest);\r\n};\r\n\r\nconst firstValue = obj => {\r\n\tif (typeof obj === 'object') return obj[Object.keys(obj)[0]];\r\n\treturn obj[0];\r\n};\r\n\r\nconst getFileName = text => {\r\n\tif (Array.isArray(text)) text = text[0];\r\n\tif (!text) return undefined;\r\n\tif (text.indexOf(':') !== -1) {\r\n\t\tconst [, name] = text.split(':');\r\n\t\treturn name;\r\n\t}\r\n\treturn text;\r\n};\r\n\r\n/**\r\n * WikiPage\r\n * @namespace WikiPage\r\n */\r\nexport default function wikiPage(rawPageInfo, apiOptions) {\r\n\tconst raw = rawPageInfo;\r\n\r\n\t/**\r\n\t * HTML from page\r\n\t * @example\r\n\t * wiki.page('batman').then(page => page.html()).then(console.log);\r\n\t * @method WikiPage#html\r\n\t * @return {Promise}\r\n\t */\r\n\tfunction html() {\r\n\t\treturn api(apiOptions, {\r\n\t\t\tprop: 'revisions',\r\n\t\t\trvprop: 'content',\r\n\t\t\trvlimit: 1,\r\n\t\t\trvparse: '',\r\n\t\t\ttitles: raw.title\r\n\t\t}).then(res => res.query.pages[raw.pageid].revisions[0]['*']);\r\n\t}\r\n\r\n\t/**\r\n\t * @summary Useful for extracting structured section content from the page\r\n\t * @alias sections\r\n\t * @example\r\n\t * wiki.page('batman').then(page => page.content()).then(console.log);\r\n\t * @method WikiPage#content\r\n\t * @return {Promise}\r\n\t */\r\n\tfunction content() {\r\n\t\treturn rawContent().then(parseContent);\r\n\t}\r\n\r\n\t/**\r\n\t * Raw content from page\r\n\t * @example\r\n\t * wiki.page('batman').then(page => page.rawContent()).then(console.log);\r\n\t * @method WikiPage#rawContent\r\n\t * @return {Promise}\r\n\t */\r\n\tfunction rawContent() {\r\n\t\treturn api(apiOptions, {\r\n\t\t\tprop: 'extracts',\r\n\t\t\texplaintext: '',\r\n\t\t\ttitles: raw.title\r\n\t\t}).then(res => res.query.pages[raw.pageid].extract);\r\n\t}\r\n\r\n\t/**\r\n\t * Text summary from page\r\n\t * @example\r\n\t * wiki.page('batman').then(page => page.summary()).then(console.log);\r\n\t * @method WikiPage#summary\r\n\t * @return {Promise}\r\n\t */\r\n\tfunction summary() {\r\n\t\treturn api(apiOptions, {\r\n\t\t\tprop: 'extracts',\r\n\t\t\texplaintext: '',\r\n\t\t\texintro: '',\r\n\t\t\ttitles: raw.title\r\n\t\t}).then(res => res.query.pages[raw.pageid].extract);\r\n\t}\r\n\r\n\t/**\r\n\t * Raw data from images from page\r\n\t * @example\r\n\t * wiki.page('batman').then(page => page.rawImages()).then(console.log);\r\n\t * @method WikiPage#rawImages\r\n\t * @return {Promise}\r\n\t */\r\n\tfunction rawImages() {\r\n\t\treturn api(apiOptions, {\r\n\t\t\tgenerator: 'images',\r\n\t\t\tgimlimit: 'max',\r\n\t\t\tprop: 'imageinfo',\r\n\t\t\tiiprop: 'url',\r\n\t\t\ttitles: raw.title\r\n\t\t}).then(res => {\r\n\t\t\tif (res.query) {\r\n\t\t\t\treturn Object.keys(res.query.pages).map(id => res.query.pages[id]);\r\n\t\t\t}\r\n\t\t\treturn [];\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Main image URL from infobox on page\r\n\t * @example\r\n\t * wiki.page('batman').then(page => page.mainImage()).then(console.log);\r\n\t * @method WikiPage#mainImage\r\n\t * @return {Promise}\r\n\t */\r\n\tfunction mainImage() {\r\n\t\treturn Promise.all([rawImages(), info()]).then(([images, info]) => {\r\n\t\t\t// Handle different translations of \"image\" here\r\n\t\t\tconst mainImageName = getFileName(\r\n\t\t\t\tinfo.image ||\r\n\t\t\t\t\tinfo.bildname ||\r\n\t\t\t\t\tinfo.imagen ||\r\n\t\t\t\t\tinfo.Immagine ||\r\n\t\t\t\t\tinfo.badge ||\r\n\t\t\t\t\tinfo.logo\r\n\t\t\t);\r\n\t\t\t// Handle case where no info box exists\r\n\t\t\tif (!mainImageName) {\r\n\t\t\t\treturn rawInfo().then(text => {\r\n\t\t\t\t\tif (!images.length) return undefined;\r\n\t\t\t\t\t// Sort images by what is seen first in page's info text\r\n\t\t\t\t\timages.sort((a, b) => text.indexOf(b.title) - text.indexOf(a.title));\r\n\t\t\t\t\tconst image = images[0];\r\n\t\t\t\t\treturn image.imageinfo.length > 0\r\n\t\t\t\t\t\t? image.imageinfo[0].url\r\n\t\t\t\t\t\t: undefined;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tconst image = images.find(({ title }) => {\r\n\t\t\t\tconst filename = getFileName(title);\r\n\t\t\t\t// Some wikis use underscores for spaces, some don't\r\n\t\t\t\treturn (\r\n\t\t\t\t\tfilename.toUpperCase() === mainImageName.toUpperCase() ||\r\n\t\t\t\t\tfilename.replace(/\\s/g, '_') === mainImageName\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t\treturn image && image.imageinfo.length > 0\r\n\t\t\t\t? image.imageinfo[0].url\r\n\t\t\t\t: undefined;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Image URL's from page\r\n\t * @example\r\n\t * wiki.page('batman').then(page => page.image()).then(console.log);\r\n\t * @method WikiPage#images\r\n\t * @return {Promise}\r\n\t */\r\n\tfunction images() {\r\n\t\treturn rawImages().then(images => {\r\n\t\t\treturn images\r\n\t\t\t\t.map(image => image.imageinfo)\r\n\t\t\t\t.reduce((imageInfos, list) => [...imageInfos, ...list], [])\r\n\t\t\t\t.map(info => info.url);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * External links from page\r\n\t * @example\r\n\t * wiki.page('batman').then(page => page.externalLinks()).then(console.log);\r\n\t * @method WikiPage#externalLinks\r\n\t * @return {Promise}\r\n\t */\r\n\tfunction externalLinks() {\r\n\t\treturn api(apiOptions, {\r\n\t\t\tprop: 'extlinks',\r\n\t\t\tellimit: 'max',\r\n\t\t\ttitles: raw.title\r\n\t\t}).then(res => res.query.pages[raw.pageid].extlinks.map(link => link['*']));\r\n\t}\r\n\r\n\t/**\r\n\t * References from page\r\n\t * @example\r\n\t * wiki.page('batman').then(page => page.references()).then(console.log);\r\n\t * @method WikiPage#references\r\n\t * @return {Promise}\r\n\t */\r\n\tfunction references() {\r\n\t\treturn html()\r\n\t\t\t.then(cheerio.load)\r\n\t\t\t.then($ => {\r\n\t\t\t\treturn $('.references cite a.external')\r\n\t\t\t\t\t.map(function() {\r\n\t\t\t\t\t\treturn $(this).attr('href');\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.get();\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Paginated links from page\r\n\t * @example\r\n\t * wiki.page('batman').then(page => page.links()).then(console.log);\r\n\t * @method WikiPage#links\r\n\t * @param  {Boolean} [aggregated] - return all links (default is true)\r\n\t * @param  {Number} [limit] - number of links per page\r\n\t * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\r\n\t */\r\n\tfunction links(aggregated = true, limit = 100) {\r\n\t\tconst _pagination = pagination(\r\n\t\t\tapiOptions,\r\n\t\t\t{\r\n\t\t\t\tprop: 'links',\r\n\t\t\t\tplnamespace: 0,\r\n\t\t\t\tpllimit: limit,\r\n\t\t\t\ttitles: raw.title\r\n\t\t\t},\r\n\t\t\tres => res.query.pages[raw.pageid].links.map(link => link.title)\r\n\t\t);\r\n\t\tif (aggregated) {\r\n\t\t\treturn aggregatePagination(_pagination);\r\n\t\t}\r\n\t\treturn _pagination;\r\n\t}\r\n\r\n\t/**\r\n\t * Paginated categories from page\r\n\t * @example\r\n\t * wiki.page('batman').then(page => page.categories()).then(console.log);\r\n\t * @method WikiPage#categories\r\n\t * @param  {Boolean} [aggregated] - return all categories (default is true)\r\n\t * @param  {Number} [limit] - number of categories per page\r\n\t * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\r\n\t */\r\n\tfunction categories(aggregated = true, limit = 100) {\r\n\t\tconst _pagination = pagination(\r\n\t\t\tapiOptions,\r\n\t\t\t{\r\n\t\t\t\tprop: 'categories',\r\n\t\t\t\tpllimit: limit,\r\n\t\t\t\ttitles: raw.title\r\n\t\t\t},\r\n\t\t\tres =>\r\n\t\t\t\tres.query.pages[raw.pageid].categories.map(category => category.title)\r\n\t\t);\r\n\t\tif (aggregated) {\r\n\t\t\treturn aggregatePagination(_pagination);\r\n\t\t}\r\n\t\treturn _pagination;\r\n\t}\r\n\r\n\t/**\r\n\t * Geographical coordinates from page\r\n\t * @example\r\n\t * wiki().page('Texas').then(texas => texas.coordinates())\r\n\t * @method WikiPage#coordinates\r\n\t * @return {Promise}\r\n\t */\r\n\tfunction coordinates() {\r\n\t\treturn api(apiOptions, {\r\n\t\t\tprop: 'coordinates',\r\n\t\t\ttitles: raw.title\r\n\t\t}).then(res => {\r\n\t\t\tconst page = res.query.pages[raw.pageid];\r\n\t\t\tif (page.coordinates) {\r\n\t\t\t\treturn page.coordinates[0];\r\n\t\t\t}\r\n\t\t\t// No coordinates for this page, check infobox for deprecated version\r\n\t\t\treturn info().then(data => parseCoordinates(data));\r\n\t\t});\r\n\t}\r\n\r\n\tfunction rawInfo(title) {\r\n\t\treturn api(apiOptions, {\r\n\t\t\tprop: 'revisions',\r\n\t\t\trvprop: 'content',\r\n\t\t\trvsection: 0,\r\n\t\t\ttitles: title || raw.title\r\n\t\t}).then(res => get(res, 'query', 'pages', firstValue, 'revisions', 0, '*'));\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch and parse tables within page\r\n\t * @method WikiPage#tables\r\n\t * @return {Promise} Resolves to a collection of tables\r\n\t */\r\n\tfunction tables() {\r\n\t\treturn api(apiOptions, {\r\n\t\t\tprop: 'revisions',\r\n\t\t\trvprop: 'content',\r\n\t\t\ttitles: raw.title\r\n\t\t})\r\n\t\t\t.then(res => get(res, 'query', 'pages', firstValue, 'revisions', 0, '*'))\r\n\t\t\t.then(wikitext => infoboxParser(wikitext, apiOptions.parser).tables);\r\n\t}\r\n\r\n\t/**\r\n\t * Get general information from page, with optional specifc property\r\n\t * @deprecated This method will be dropped and replaced with the `fullInfo` implementation in v5\r\n\t * @example\r\n\t * new Wiki().page('Batman').then(page => page.info('alter_ego'));\r\n\t * @method WikiPage#info\r\n\t * @param  {String} [key] - Information key. Falsy keys are ignored\r\n\t * @return {Promise} - info Object contains key/value pairs of infobox data, or specific value if key given\r\n\t */\r\n\tfunction info(key) {\r\n\t\treturn rawInfo()\r\n\t\t\t.then(wikitext => {\r\n\t\t\t\t// Use general data for now...\r\n\t\t\t\tconst info = infoboxParser(wikitext, apiOptions.parser).general;\r\n\t\t\t\tif (Object.keys(info).length === 0) {\r\n\t\t\t\t\t// If empty, check to see if this page has a templated infobox\r\n\t\t\t\t\treturn rawInfo(`Template:Infobox ${raw.title.toLowerCase()}`).then(\r\n\t\t\t\t\t\t_wikitext =>\r\n\t\t\t\t\t\t\tinfoboxParser(_wikitext || '', apiOptions.parser).general\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\treturn info;\r\n\t\t\t})\r\n\t\t\t.then(metadata => {\r\n\t\t\t\tif (!key) {\r\n\t\t\t\t\treturn metadata;\r\n\t\t\t\t}\r\n\t\t\t\tif (metadata.hasOwnProperty(key)) {\r\n\t\t\t\t\treturn metadata[key];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Get the full infobox data, parsed in a easy to use manner\r\n\t * @example\r\n\t * new Wiki().page('Batman').then(page => page.fullInfo()).then(info => info.general.aliases);\r\n\t * @method WikiPage#fullInfo\r\n\t * @return {Promise} - Parsed object of all infobox data\r\n\t */\r\n\tfunction fullInfo() {\r\n\t\treturn rawInfo().then(wikitext =>\r\n\t\t\tinfoboxParser(wikitext, apiOptions.parser)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Paginated backlinks from page\r\n\t * @method WikiPage#backlinks\r\n\t * @param  {Boolean} [aggregated] - return all backlinks (default is true)\r\n\t * @param  {Number} [limit] - number of backlinks per page\r\n\t * @return {Promise} - includes results [and next function for more results if not aggregated]\r\n\t */\r\n\tfunction backlinks(aggregated = true, limit = 100) {\r\n\t\tconst _pagination = pagination(\r\n\t\t\tapiOptions,\r\n\t\t\t{\r\n\t\t\t\tlist: 'backlinks',\r\n\t\t\t\tbllimit: limit,\r\n\t\t\t\tbltitle: raw.title\r\n\t\t\t},\r\n\t\t\tres => res.query.backlinks.map(link => link.title)\r\n\t\t);\r\n\t\tif (aggregated) {\r\n\t\t\treturn aggregatePagination(_pagination);\r\n\t\t}\r\n\t\treturn _pagination;\r\n\t}\r\n\r\n\t/**\r\n\t * Get list of links to different translations\r\n\t * @method WikiPage#langlinks\r\n\t * @return {Promise} - includes link objects { lang, title }\r\n\t */\r\n\tfunction langlinks() {\r\n\t\treturn api(apiOptions, {\r\n\t\t\tprop: 'langlinks',\r\n\t\t\tlllimit: 'max',\r\n\t\t\ttitles: raw.title\r\n\t\t}).then(res =>\r\n\t\t\tres.query.pages[raw.pageid].langlinks.map(link => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tlang: link.lang,\r\n\t\t\t\t\ttitle: link['*']\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Get URL for wiki page\r\n\t * @method WikiPage#url\r\n\t * @return {URL}\r\n\t */\r\n\tfunction url() {\r\n\t\treturn raw.canonicalurl;\r\n\t}\r\n\r\n\tconst page = {\r\n\t\traw,\r\n\t\thtml,\r\n\t\trawContent,\r\n\t\tcontent,\r\n\t\tsections: content,\r\n\t\tsummary,\r\n\t\timages,\r\n\t\treferences,\r\n\t\tlinks,\r\n\t\texternalLinks,\r\n\t\tcategories,\r\n\t\tcoordinates,\r\n\t\tinfo,\r\n\t\tbacklinks,\r\n\t\trawImages,\r\n\t\tmainImage,\r\n\t\tlanglinks,\r\n\t\trawInfo,\r\n\t\tfullInfo,\r\n\t\ttables,\r\n\t\turl\r\n\t};\r\n\r\n\treturn page;\r\n}\r\n"]}